devtools::install_github("cberenfeld/causal_meta", build_vignettes = TRUE)
```{r, eval = FALSE}
devtools::install_github("cberenfeld/causal_meta", build_vignettes = TRUE)
install.packages(kableExtra)
install.packages("kableExtra")
library(stringr)
library(data.table)
library(ggplot2)
library(stringr)
library(purrr)
library(dplyr)
library(gridExtra)
library(metafor)
library(causalmeta)
d <- fread("out2_ma_sample_2.csv")
merged <- merged[merged$n.e > 0 & merged$n.c > 0, ]
library(data.table)
library(ggplot2)
library(stringr)
library(purrr)
library(dplyr)
library(gridExtra)
library(metafor)
library(causalmeta)
merged <- fread("out2_ma_sample_2.csv")
merged <- merged[merged$n.e > 0 & merged$n.c > 0, ]
merged <- merged
merged$group.no[is.na(merged$group.no)] <- 0
library(causalmeta)
# apply the same function but print the plot
result <- causalmeta(measure = measure, ai = treated_events, n1i = treated_total,
ci = control_events, n2i = control_total, plot = TRUE)
target_group <- list(comp.no = 1, outcome.no = 45, group.no = 0, cochrane_id = "CD012481")
measure <- c("RR")
target_group
# Example selection
target_group <- list(comp.no = 1, outcome.no = 45, group.no = 0, cochrane_id = "CD012481")
measure <- c("RR")
# Filter the merged study data
group_data <- merged[
comp.no == target_group$comp.no &
outcome.no == target_group$outcome.no &
group.no == target_group$group.no &
cochrane_id == target_group$cochrane_id
]
# Calculate causal meta:
result <- tryCatch(
meta_cima(group_data, measure = measure),
error = function(cond) tibble(tau = NA_real_, n_study = 0)
)
# Calculate standard meta-analysis
dat <- escalc(measure=measure , ai=event.e, n1i=n.e, ci=event.c, n2i=n.c, data=group_data, slab=studlab)
res <- rma(yi, vi, data=dat, method="DL")
# Smart way to add it to the plot
res2 <- rma(yi = result$estimate, vi = result$variance, method="FE")
meta_cima <- function(group, measure) {
# Calculate the total sample size across all studies
n_total <- sum(group$n.e + group$n.c)
# For each study (row in 'group'), calculate required statistics
results <- pmap_dfr(group, function(event.e, event.c, n.e, n.c, ...) {
# Skip studies with zero sample size in either arm
if (n.e == 0 || n.c == 0) return(NULL)
# Calculate control and experimental event rates for each study
mu_0_k <- event.c / n.c   # Control arm event proportion
mu_1_k <- event.e / n.e   # Experimental arm event proportion
# Weight (study size / total size)
proba_k <- (n.e + n.c) / n_total
# Store computed statistics in a tibble (row)
tibble(
proba_k = proba_k,
mu_0_k = mu_0_k,
mu_1_k = mu_1_k,
n.e = n.e,
n.c = n.c,
n.k = n.e + n.c
)
})
# Number of studies with non-zero sample size
n_study <- nrow(results)
if (n_study == 0) {
# Return NA if no studies are left
return(tibble(estimate = NA, variance = NA, n_study = 0))
}
# Calculate pooled (weighted average) event rates across studies
EY0 <- sum(results$mu_0_k * results$proba_k) # Control
EY1 <- sum(results$mu_1_k * results$proba_k) # Experimental
n <- n_total # Just for convenience below
# Compute the plug-in estimator
final_result <- NA
if (measure == "RD") {           # Risk Difference
final_result <- EY1 - EY0
} else if (measure == "RR") {    # Risk Ratio
final_result <- ifelse(EY0 != 0, EY1 / EY0, NA)
} else if (measure == "OR") {    # Odds Ratio
odds1 <- ifelse(EY1 != 1, EY1 / (1 - EY1), NA)
odds0 <- ifelse(EY0 != 1, EY0 / (1 - EY0), NA)
final_result <- ifelse(odds0 != 0, odds1 / odds0, NA)
} else if (measure == "SR") {    # Survival Ratio (1-risk)
final_result <- ifelse((1 - EY0) != 0, (1 - EY1) / (1 - EY0), NA)
} else {
stop(paste("Unsupported measure:", measure))
}
# Variance estimation (depends on effect measure)
variance <- NA
if (measure == "RD") {
# For Risk Difference (delta method, plug-in variance)
theta_k <- results$mu_1_k - results$mu_0_k
theta <- sum(results$n.k / n * theta_k)
xi1_sq <- sum((results$n.k^2) / (results$n.e * n) * results$mu_1_k * (1 - results$mu_1_k))
xi0_sq <- sum((results$n.k^2) / (results$n.c * n) * results$mu_0_k * (1 - results$mu_0_k))
part1 <- xi1_sq + xi0_sq
part2 <- sum(results$n.k / n * theta_k^2) - theta^2
variance <- (1 / n) * (part1 + part2)
} else if (measure == "RR") {
# For Risk Ratio (delta method)
psi1 <- EY1
psi0 <- EY0
zeta1_sq <- sum((results$n.k^2) / (results$n.e * n) * results$mu_1_k) / (psi1^2)
zeta0_sq <- sum((results$n.k^2) / (results$n.c * n) * results$mu_0_k) / (psi0^2)
variance <- (1 / n) * (psi1^2 / psi0^2) * (zeta1_sq + zeta0_sq)
variance <- variance / (final_result^2)
} else if (measure %in% c("OR", "SR")) {
# Not implemented, just placeholder
variance <- 1e-3
}
# Return estimate and variance (on log scale for ratios)
if (measure == "RD") {
tibble(estimate = final_result, variance = variance, n_study = n_study)
} else {
tibble(estimate = log(final_result), variance = variance, n_study = n_study)
}
}
# Example selection
target_group <- list(comp.no = 1, outcome.no = 45, group.no = 0, cochrane_id = "CD012481")
measure <- c("RR")
# Filter the merged study data
group_data <- merged[
comp.no == target_group$comp.no &
outcome.no == target_group$outcome.no &
group.no == target_group$group.no &
cochrane_id == target_group$cochrane_id
]
# Calculate causal meta:
result <- tryCatch(
meta_cima(group_data, measure = measure),
error = function(cond) tibble(tau = NA_real_, n_study = 0)
)
# Calculate standard meta-analysis
dat <- escalc(measure=measure , ai=event.e, n1i=n.e, ci=event.c, n2i=n.c, data=group_data, slab=studlab)
res <- rma(yi, vi, data=dat, method="DL")
# Smart way to add it to the plot
res2 <- rma(yi = result$estimate, vi = result$variance, method="FE")
pdf("my_forest_plots.pdf", width = 8, height = 6)
par(mar=c(2,2,2,2))
forest(res, header=TRUE, top=3, mlab="Random-effects model", ylim=c(-3, nrow(dat)+3))
addpoly(res2, row = -2, mlab="Causal meta-analysis")
dev.off()
measure <- c("RR")
# 1. Get all unique group combinations
unique_groups <- unique(merged[, .(comp.no, outcome.no, group.no, cochrane_id)])
results <- lapply(1:nrow(unique_groups), function(i) {
row <- unique_groups[i, ]
group_data <- merged[
comp.no == row$comp.no &
outcome.no == row$outcome.no &
group.no == row$group.no &
cochrane_id == row$cochrane_id
]
# Calculate standard meta-analysis
dat <- tryCatch({
escalc(measure = measure, ai = event.e, n1i = n.e, ci = event.c, n2i = n.c, data = group_data, slab = studlab)
}, error = function(e) NULL)
res <- tryCatch({
if (!is.null(dat)) {
rma(yi, vi, data = dat, method = "DL")
} else NA
}, error = function(e) NA)
# Calculate causal meta:
result <- tryCatch({
meta_cima(group_data, measure = measure)
}, error = function(e) tibble(estimate = NA_real_, variance = NA_real_))
res2 <- tryCatch({
if (!is.null(result) && !is.na(result$estimate) && !is.na(result$variance)) {
rma(yi = result$estimate, vi = result$variance, method = "FE")
} else NA
}, error = function(e) NA)
# Store the results
tibble(
comp.no = row$comp.no,
outcome.no = row$outcome.no,
group.no = row$group.no,
cochrane_id = row$cochrane_id,
res_estimate = ifelse(is.na(res), NA, res$b),
res2_estimate = ifelse(is.na(res2), NA, res2$b)
)
})
plot_data <- bind_rows(results)
clean_plot_data <- plot_data[!is.na(plot_data$res_estimate) & !is.na(plot_data$res2_estimate), ]
pdf("compareplot.pdf", width = 6, height = 6)
ggplot(clean_plot_data, aes(x = res_estimate, y = res2_estimate)) +
geom_point(size = 2, color = "#F7766D", alpha = 0.5, shape = 16)+
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
geom_hline(yintercept = 0, linetype = "solid", color = "grey", alpha = 0.7) +
geom_vline(xintercept = 0, linetype = "solid", color = "grey", alpha = 0.7) +
scale_x_continuous(limits = c(-1.3, 1.3)) +
scale_y_continuous(limits = c(-1.3, 1.3)) +
labs(
x = "Random-effects model",
y = "Causal meta-analysis",
title = measure
) +
theme_minimal() +
coord_fixed()+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),   # <<- Numbers on x axis
axis.text.y = element_text(size = 14),   # <<- Numbers on y axis
plot.title = element_text(size = 20, hjust = 0.5)
)
dev.off()
# apply the same function but print the plot
result <- causalmeta(measure = measure, ai = treated_events, n1i = treated_total,
ci = control_events, n2i = control_total, plot = TRUE)
require(causalmeta)
# Example 1: With vectors of total numbers and events in treated and control
# Generate data
n <- 10
treated_total <- sample.int(1000, n)
control_total <- sample.int(1000, n)
treated_events <- rbinom(n,treated_total,0.5)
control_events <- rbinom(n,control_total,0.5)
# Choose measure: RD
measure <- "RD"
# Apply function
result <- causalmeta(measure = measure, ai = treated_events, n1i = treated_total,
ci = control_events, n2i = control_total)
# Example 2: With contingency tables entries in data.frame format
# Generate data
n <- 10
treated_total <- sample.int(1000, n)
control_total <- sample.int(1000, n)
treated_events <- rbinom(n,treated_total,0.5)
control_events <- rbinom(n,control_total,0.5)
treated_negatives <- treated_total - treated_events
control_negatives <- control_total - control_events
dat <- data.frame(treated_events,control_events,treated_negatives,control_negatives)
# Choose measure: log-OR
measure <- "OR"
# Apply function
result <- causalmeta(measure = measure, ai = treated_events, bi = treated_negatives,
ci = control_events, di = control_negatives, data = dat, log.scale = TRUE)
# apply the same function but print the plot
result <- causalmeta(measure = measure, ai = treated_events, n1i = treated_total,
ci = control_events, n2i = control_total, plot = TRUE)
result
result$final_result$estimate
measure <- c("RR")
# 1. Get all unique group combinations
unique_groups <- unique(merged[, .(comp.no, outcome.no, group.no, cochrane_id)])
results <- lapply(1:nrow(unique_groups), function(i) {
row <- unique_groups[i, ]
group_data <- merged[
comp.no == row$comp.no &
outcome.no == row$outcome.no &
group.no == row$group.no &
cochrane_id == row$cochrane_id
]
# Calculate standard meta-analysis
dat <- tryCatch({
escalc(measure = measure, ai = event.e, n1i = n.e, ci = event.c, n2i = n.c, data = group_data, slab = studlab)
}, error = function(e) NULL)
res <- tryCatch({
if (!is.null(dat)) {
rma(yi, vi, data = dat, method = "DL")
} else NA
}, error = function(e) NA)
# Calculate causal meta:
result2 <- tryCatch({
meta_cima(group_data, measure = measure)
}, error = function(e) tibble(estimate = NA_real_, variance = NA_real_))
res2 <- tryCatch({
if (!is.null(result) && !is.na(result$estimate) && !is.na(result$variance)) {
rma(yi = result$estimate, vi = result$variance, method = "FE")
} else NA
}, error = function(e) NA)
# Store the results
tibble(
comp.no = row$comp.no,
outcome.no = row$outcome.no,
group.no = row$group.no,
cochrane_id = row$cochrane_id,
res_estimate = ifelse(is.na(res), NA, res$b),
res2_estimate = ifelse(is.na(res2), NA, res2$b)
)
})
plot_data <- bind_rows(results)
clean_plot_data <- plot_data[!is.na(plot_data$res_estimate) & !is.na(plot_data$res2_estimate), ]
pdf("compareplot.pdf", width = 6, height = 6)
ggplot(clean_plot_data, aes(x = res_estimate, y = res2_estimate)) +
geom_point(size = 2, color = "#F7766D", alpha = 0.5, shape = 16)+
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
geom_hline(yintercept = 0, linetype = "solid", color = "grey", alpha = 0.7) +
geom_vline(xintercept = 0, linetype = "solid", color = "grey", alpha = 0.7) +
scale_x_continuous(limits = c(-1.3, 1.3)) +
scale_y_continuous(limits = c(-1.3, 1.3)) +
labs(
x = "Random-effects model",
y = "Causal meta-analysis",
title = measure
) +
theme_minimal() +
coord_fixed()+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),   # <<- Numbers on x axis
axis.text.y = element_text(size = 14),   # <<- Numbers on y axis
plot.title = element_text(size = 20, hjust = 0.5)
)
dev.off()
library(CaMeA)
devtools::install_github("cberenfeld/causal_meta", build_vignettes = TRUE)
